import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

def crear_datos_sueno_energia():
    """Crea datos de ejemplo para horas de sue√±o vs energ√≠a diaria"""
    datos = {
        'Horas_Sueno': [5, 6, 7, 8, 9, 10],
        'Energia_Diaria': [3.0, 4.5, 6.0, 7.5, 8.0, 7.0]  # Escala 0-10
    }
    return pd.DataFrame(datos)

def generar_datos_sueno_aleatorios(n_muestras=30):
    """Genera datos aleatorios para experimentar con sue√±o vs energ√≠a"""
    np.random.seed(42)
    horas_sueno = np.random.uniform(4.0, 12.0, n_muestras)
    
    # Simula relaci√≥n: m√°s sue√±o = m√°s energ√≠a (hasta cierto punto)
    # Despu√©s de 9 horas, la energ√≠a puede disminuir ligeramente
    energia_base = 0.8 * horas_sueno + 1.0
    # A√±adir efecto de "demasiado sue√±o" despu√©s de 9 horas
    efecto_exceso = np.where(horas_sueno > 9, -0.3 * (horas_sueno - 9), 0)
    energia = energia_base + efecto_exceso + np.random.normal(0, 0.8, n_muestras)
    energia = np.clip(energia, 0, 10)
    
    datos = {
        'Horas_Sueno': horas_sueno,
        'Energia_Diaria': energia
    }
    return pd.DataFrame(datos)

def entrenar_modelo_sueno(X, y):
    """Entrena el modelo de regresi√≥n lineal para sue√±o vs energ√≠a"""
    modelo = LinearRegression()
    modelo.fit(X, y)
    return modelo

def mostrar_resultados_sueno(modelo, X, y):
    """Muestra los resultados del modelo de sue√±o vs energ√≠a"""
    m = modelo.coef_[0]
    b = modelo.intercept_
    
    y_pred = modelo.predict(X)
    r2 = r2_score(y, y_pred)
    
    print("=" * 60)
    print("RESULTADOS: HORAS DE SUE√ëO vs ENERG√çA DIARIA")
    print("=" * 60)
    print(f"Ecuaci√≥n: Energ√≠a = {m:.3f} √ó Horas_Sue√±o + {b:.3f}")
    print(f"Coeficiente R¬≤: {r2:.4f}")
    print("=" * 60)
    
    return m, b, r2

def graficar_sueno_energia(X, y, modelo, m, b):
    """Crea gr√°fica para sue√±o vs energ√≠a"""
    plt.figure(figsize=(12, 8))
    
    # Gr√°fica principal
    plt.subplot(2, 2, 1)
    plt.scatter(X, y, color='purple', s=100, alpha=0.7, label='Datos originales')
    
    X_line = np.linspace(X.min() - 0.5, X.max() + 0.5, 100)
    y_line = m * X_line + b
    plt.plot(X_line, y_line, color='orange', linewidth=2, label=f'Energ√≠a = {m:.3f}√óSue√±o + {b:.3f}')
    
    plt.xlabel('Horas de Sue√±o', fontsize=12)
    plt.ylabel('Energ√≠a Diaria (0-10)', fontsize=12)
    plt.title('Relaci√≥n: Sue√±o vs Energ√≠a Diaria', fontsize=14, fontweight='bold')
    plt.grid(True, alpha=0.3)
    plt.legend()
    plt.xlim(4, 12)
    plt.ylim(0, 10)
    
    # Gr√°fica de distribuci√≥n de horas de sue√±o
    plt.subplot(2, 2, 2)
    plt.hist(X, bins=10, color='lightblue', alpha=0.7, edgecolor='black')
    plt.xlabel('Horas de Sue√±o')
    plt.ylabel('Frecuencia')
    plt.title('Distribuci√≥n de Horas de Sue√±o')
    plt.grid(True, alpha=0.3)
    
    # Gr√°fica de distribuci√≥n de energ√≠a
    plt.subplot(2, 2, 3)
    plt.hist(y, bins=10, color='lightgreen', alpha=0.7, edgecolor='black')
    plt.xlabel('Energ√≠a Diaria')
    plt.ylabel('Frecuencia')
    plt.title('Distribuci√≥n de Energ√≠a Diaria')
    plt.grid(True, alpha=0.3)
    
    # Gr√°fica de residuos
    plt.subplot(2, 2, 4)
    y_pred = modelo.predict(X)
    residuos = y - y_pred
    plt.scatter(y_pred, residuos, color='red', alpha=0.7)
    plt.axhline(y=0, color='black', linestyle='--', alpha=0.5)
    plt.xlabel('Energ√≠a Predicha')
    plt.ylabel('Residuos')
    plt.title('An√°lisis de Residuos')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def predecir_energia(modelo):
    """Predice energ√≠a basada en horas de sue√±o"""
    while True:
        try:
            print("\n" + "=" * 50)
            print("PREDICCI√ìN DE ENERG√çA DIARIA")
            print("=" * 50)
            horas_sueno = float(input("Introduce las horas de sue√±o: "))
            
            if horas_sueno < 0 or horas_sueno > 24:
                print("‚ùå Error: Las horas de sue√±o deben estar entre 0 y 24.")
                continue
                
            prediccion = modelo.predict([[horas_sueno]])[0]
            prediccion = np.clip(prediccion, 0, 10)
            
            print(f"\nüò¥ Horas de sue√±o: {horas_sueno}")
            print(f"‚ö° Energ√≠a predicha: {prediccion:.2f}/10")
            
            # Recomendaciones
            if horas_sueno < 6:
                print("‚ö†Ô∏è  Poco sue√±o detectado. Considera dormir m√°s para mejorar tu energ√≠a.")
            elif horas_sueno > 10:
                print("üò¥ Muchas horas de sue√±o. Podr√≠as sentirte somnoliento durante el d√≠a.")
            else:
                print("‚úÖ Horas de sue√±o saludables. ¬°Mant√©n esta rutina!")
            
            if prediccion >= 7:
                print("üöÄ ¬°Excelente nivel de energ√≠a! Tendr√°s un d√≠a productivo.")
            elif prediccion >= 5:
                print("üëç Energ√≠a moderada. Considera una siesta corta si es necesario.")
            else:
                print("üò¥ Baja energ√≠a. Prioriza el descanso y la hidrataci√≥n.")
            
            break
            
        except ValueError:
            print("‚ùå Error: Por favor introduce un n√∫mero v√°lido.")
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            exit()

def analizar_patrones_sueno(df):
    """Analiza patrones en los datos de sue√±o"""
    print("\nüìä AN√ÅLISIS DE PATRONES DE SUE√ëO")
    print("=" * 40)
    
    print(f"Promedio de horas de sue√±o: {df['Horas_Sueno'].mean():.2f}")
    print(f"Desviaci√≥n est√°ndar: {df['Horas_Sueno'].std():.2f}")
    print(f"Horas m√≠nimas: {df['Horas_Sueno'].min():.1f}")
    print(f"Horas m√°ximas: {df['Horas_Sueno'].max():.1f}")
    
    print(f"\nPromedio de energ√≠a: {df['Energia_Diaria'].mean():.2f}")
    print(f"Energ√≠a m√°xima registrada: {df['Energia_Diaria'].max():.1f}")
    print(f"Energ√≠a m√≠nima registrada: {df['Energia_Diaria'].min():.1f}")
    
    # Encontrar mejor combinaci√≥n
    mejor_idx = df['Energia_Diaria'].idxmax()
    mejor_sueno = df.loc[mejor_idx, 'Horas_Sueno']
    mejor_energia = df.loc[mejor_idx, 'Energia_Diaria']
    
    print(f"\nüèÜ Mejor combinaci√≥n:")
    print(f"   {mejor_sueno:.1f} horas de sue√±o ‚Üí {mejor_energia:.1f} de energ√≠a")

def main():
    """Funci√≥n principal para el ejemplo de sue√±o vs energ√≠a"""
    print("üò¥ ENERG√çA DIARIA vs HORAS DE SUE√ëO")
    print("=" * 60)
    
    # Crear datos
    print("\nüìä Creando datos de ejemplo...")
    df = crear_datos_sueno_energia()
    
    print("Datos de entrenamiento:")
    print(df.to_string(index=False))
    
    # Separar variables
    X = df['Horas_Sueno'].values.reshape(-1, 1)
    y = df['Energia_Diaria'].values
    
    # Entrenar modelo
    print("\nü§ñ Entrenando modelo...")
    modelo = entrenar_modelo_sueno(X, y)
    
    # Mostrar resultados
    m, b, r2 = mostrar_resultados_sueno(modelo, X, y)
    
    # Analizar patrones
    analizar_patrones_sueno(df)
    
    # Graficar
    print("\nüìà Generando gr√°ficas...")
    graficar_sueno_energia(X, y, modelo, m, b)
    
    # Predicciones
    while True:
        predecir_energia(modelo)
        
        continuar = input("\n¬øOtra predicci√≥n? (s/n): ").lower()
        if continuar not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("üò¥ ¬°Descansa bien!")
            break

if __name__ == "__main__":
    main() 